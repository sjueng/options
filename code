# --- Imports ---
# Standard library imports
import io
from datetime import timedelta, time, datetime # Ensure datetime is imported

# Third-party imports
import pandas as pd
import pytz # For timezone handling

# QuantConnect imports
from AlgorithmImports import *
#---------------------------------------------------------------------------------

class OptionsSignalBacktest(QCAlgorithm):
    """
    Algorithm to backtest option trading signals from a CSV file.

    Reads signals (Timestamp, Ticker, Signaltype) from 'cleaned_15min_data.csv'
    in the Object Store. Enters single-leg Call/Put positions based on the latest
    signal for each ticker, considering signals generated outside market hours.
    Uses parameters for DTE, Delta, Take Profit %, and Stop Loss %.
    """

    def Initialize(self):
        """Initial algorithm setup."""
        # --- Parameters ---
        self.target_dte = self.GetParameter("dte", 0)        # Default 0 DTE
        self.target_delta = self.GetParameter("delta", 0.70) # Default 0.70 delta
        self.take_profit_pct = self.GetParameter("tp", 1.0)  # Default 100% TP
        self.stop_loss_pct = self.GetParameter("sl", 0.0)    # Default 0% SL
        # --- /Parameters ---

        # --- Backtest Settings ---
        self.SetStartDate(2022, 4, 14) # Match first data timestamp
        self.SetEndDate(2025, 4, 5)   # Set to day after last data timestamp
        self.SetCash(100000)
        self.SetTimeZone("America/New_York")
        self.SetBrokerageModel(BrokerageName.InteractiveBrokersBrokerage, AccountType.Margin)
        self.SetSecurityInitializer(self.CustomSecurityInitializer)
        # --- /Backtest Settings ---

        # --- Data Loading and Preparation ---
        self.signals_df = self._load_signals()
        if self.signals_df is None or self.signals_df.empty:
            self.Error("No signals loaded or error during loading. Stopping algorithm.")
            self.Quit("Failed to load signals from Object Store.")
            return

        self.tickers = self.signals_df['Ticker'].str.upper().unique().tolist()
        if not self.tickers:
            self.Error("No tickers found in the signal file after processing. Stopping algorithm.")
            self.Quit("No tickers available.")
            return
        self.Log(f"Tickers to trade based on signals: {self.tickers}")
        # --- /Data Loading and Preparation ---

        # --- State Variables ---
        self.last_processed_signal_time = {ticker: None for ticker in self.tickers} # Stores pd.Timestamp
        self.active_signal_type = {ticker: None for ticker in self.tickers}
        self.current_option_symbol = {ticker: None for ticker in self.tickers} # Stores Option Symbol
        self.option_entry_price = {ticker: 0.0 for ticker in self.tickers}
        # --- /State Variables ---

        # --- Universe and Data Setup ---
        self.option_universe_settings = {}
        required_resolution = Resolution.Minute
        tickers_to_remove = []
        for ticker in self.tickers:
            try:
                equity = self.AddEquity(ticker, resolution=required_resolution)
                option = self.AddOption(ticker, resolution=required_resolution)
                option.SetFilter(self._option_filter)
                self.option_universe_settings[ticker] = {'equity_symbol': equity.Symbol}
            except Exception as e:
                self.Error(f"Error adding securities for {ticker}: {e}. Skipping this ticker.")
                tickers_to_remove.append(ticker)

        if tickers_to_remove:
            for ticker in tickers_to_remove:
                 self.tickers.remove(ticker)
                 del self.last_processed_signal_time[ticker]
                 del self.active_signal_type[ticker]
                 del self.current_option_symbol[ticker]
                 del self.option_entry_price[ticker]
                 if ticker in self.option_universe_settings: del self.option_universe_settings[ticker]

        if not self.tickers:
             self.Error("No tickers were successfully added after setup attempts. Stopping algorithm.")
             self.Quit("Failed to add any tickers.")
             return
        # --- /Universe and Data Setup ---

        # --- Scheduled Events ---
        self.Schedule.On(self.DateRules.EveryDay(),
                         self.TimeRules.At(9, 31),
                         self.ProcessLatestPreMarketSignal)
        # --- /Scheduled Events ---

        self.SetWarmUp(timedelta(days=5))
        self.Log("Initialization complete. Waiting for warmup period to finish.")


    def _load_signals(self) -> pd.DataFrame | None:
        """Loads and preprocesses signals from the CSV file in the Object Store."""
        object_store_key = "cleaned_15min_data.csv"
        self.Log(f"Attempting to load signals from Object Store: '{object_store_key}'")
        if not self.ObjectStore.ContainsKey(object_store_key):
            self.Error(f"Object Store key '{object_store_key}' not found.")
            return None
        try:
            csv_data = self.ObjectStore.ReadBytes(object_store_key)
            df = pd.read_csv(io.BytesIO(csv_data))
            self.Log(f"Successfully read {len(df)} rows from CSV file.")

            # --- Data Cleaning ---
            df.columns = [col.strip().lower() for col in df.columns]
            required_cols = ['timestamp', 'ticker', 'signaltype']
            if not all(col in df.columns for col in required_cols):
                missing = [col for col in required_cols if col not in df.columns]
                raise ValueError(f"CSV missing required columns: {missing}. Found: {df.columns.tolist()}")

            df = df.rename(columns={'timestamp': 'Timestamp', 'ticker': 'Ticker', 'signaltype': 'SignalType'})
            # Ensure Timestamp column is pandas Timestamp with UTC timezone
            df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce', utc=True)

            initial_rows = len(df); df = df.dropna(subset=['Timestamp']);
            if len(df) < initial_rows: self.Log(f"Dropped {initial_rows - len(df)} rows due to invalid timestamps.")

            df['SignalType'] = df['SignalType'].str.strip().str.capitalize()
            valid_signals = ['Call', 'Put']; initial_rows = len(df); df = df[df['SignalType'].isin(valid_signals)];
            if len(df) < initial_rows: self.Log(f"Dropped {initial_rows - len(df)} rows due to invalid SignalType.")

            df['Ticker'] = df['Ticker'].str.strip().str.upper()
            df = df.dropna(subset=['Ticker', 'SignalType'])
            df = df.sort_values(by='Timestamp')
            df = df[['Timestamp', 'Ticker', 'SignalType']]
            # --- /Data Cleaning ---

            self.Log(f"Loaded and processed {len(df)} valid signals.")
            if not df.empty:
                 self.Log(f"Signal Timestamp Range: {df['Timestamp'].min()} to {df['Timestamp'].max()}")
                 self.Log(f"Sample signals:\n{df.head().to_string()}")
            else:
                 self.Log("No valid signals found after processing."); return None
            return df
        except Exception as e:
            self.Error(f"Error loading/processing signals: {e}"); import traceback; self.Error(traceback.format_exc()); return None


    def CustomSecurityInitializer(self, security: Security):
        """Applies custom settings to each security."""
        security.SetSlippageModel(VolumeShareSlippageModel())
        security.SetFeeModel(InteractiveBrokersFeeModel())


    def _option_filter(self, filter_event: OptionFilterUniverse) -> OptionFilterUniverse:
        """Basic filter for the option chain universe."""
        min_dte = 0; max_dte = max(self.target_dte, 0) + 2;
        return filter_event.Expiration(timedelta(days=min_dte), timedelta(days=max_dte))


    def ProcessLatestPreMarketSignal(self):
        """Scheduled task to process the latest signal before market open."""
        if self.IsWarmingUp: return
        ny_zone = pytz.timezone("America/New_York"); utc_zone = pytz.utc;
        try:
            current_time_et = self.Time.astimezone(ny_zone)
        except Exception as e: self.Error(f"Error converting self.Time to NY: {e}."); return
        market_open_today_et = current_time_et.replace(hour=9, minute=30, second=0, microsecond=0)
        try:
            if market_open_today_et.tzinfo is None: market_open_today_et = ny_zone.localize(market_open_today_et)
            market_open_today_utc = market_open_today_et.astimezone(utc_zone) # Python datetime object
            # --- Timestamp Conversion ---
            # Convert to pandas Timestamp for consistent comparison
            market_open_today_ts = pd.Timestamp(market_open_today_utc)
            # --- /Timestamp Conversion ---
        except Exception as e: self.Error(f"Error converting market open ET to UTC/Timestamp: {e}."); return

        self.Log(f"--- Market Open Signal Check @ {current_time_et} ET ({self.Time} UTC) ---")
        for ticker in self.tickers:
            ticker_signals = self.signals_df[self.signals_df['Ticker'] == ticker]
            # Compare Series[pd.Timestamp UTC] < pd.Timestamp [UTC]
            try:
                pre_market_signals = ticker_signals[ticker_signals['Timestamp'] < market_open_today_ts]
            except TypeError as e:
                self.Error(f"Comparison TypeError in ProcessLatestPreMarketSignal: {e}")
                self.Error(f"Comparing Series dtype: {ticker_signals['Timestamp'].dtype}")
                self.Error(f"with scalar type: {type(market_open_today_ts)} ({market_open_today_ts})")
                continue # Skip ticker if comparison fails

            if not pre_market_signals.empty:
                latest_pre_market_signal = pre_market_signals.iloc[-1]
                signal_time = latest_pre_market_signal['Timestamp'] # pd.Timestamp
                signal_type = latest_pre_market_signal['SignalType']
                last_processed_time = self.last_processed_signal_time[ticker] # None or pd.Timestamp
                if last_processed_time is None or signal_time > last_processed_time:
                    self.Log(f"{ticker}: Pre-Market Action -> Signal: {signal_type} @ {signal_time}. Processing.")
                    self._execute_trade_logic(ticker, signal_type, signal_time)


    def OnData(self, data: Slice):
        """Main event handler for processing data and managing trades."""
        if self.IsWarmingUp: return

        # Use pd.Timestamp for internal logic consistency and comparisons
        # self.Time is datetime UTC, pd.Timestamp converts it correctly
        current_utc_time_ts = pd.Timestamp(self.Time) # pd.Timestamp UTC

        # --- Market Open Check ---
        try:
            first_ticker_symbol = self.option_universe_settings[self.tickers[0]]['equity_symbol']
            if not self.Securities[first_ticker_symbol].Exchange.ExchangeOpen: return
        except (IndexError, KeyError) as e: self.Error(f"Error checking market hours: {e}"); return
        # --- /Market Open Check ---

        for ticker in self.tickers:
            # --- Process New Intra-day Signals ---
            last_processed_time_ts = self.last_processed_signal_time[ticker] # Should be None or pd.Timestamp
            if last_processed_time_ts is None:
                 start_date_utc = self.StartDate
                 if start_date_utc.tzinfo is None: start_date_utc = pytz.utc.localize(start_date_utc)
                 elif start_date_utc.tzinfo != pytz.utc: start_date_utc = start_date_utc.astimezone(pytz.utc)
                 last_processed_time_ts = pd.Timestamp(start_date_utc) # pd.Timestamp

            ticker_signals = self.signals_df[self.signals_df['Ticker'] == ticker]

            # Compare Series[pd.Timestamp UTC] with pd.Timestamp UTC for both sides
            try:
                new_signals = ticker_signals[
                    (ticker_signals['Timestamp'] > last_processed_time_ts) & # Compare Series[UTC] > Timestamp[UTC]
                    (ticker_signals['Timestamp'] <= current_utc_time_ts)    # Compare Series[UTC] <= Timestamp[UTC]
                ]
            except TypeError as e:
                # Log detailed error if comparison still fails
                self.Error(f"Comparison TypeError in OnData: {e}")
                self.Error(f"Comparing Series dtype: {ticker_signals['Timestamp'].dtype} ({ticker_signals['Timestamp'].iloc[0] if not ticker_signals.empty else 'N/A'})")
                self.Error(f"with scalar types: {type(last_processed_time_ts)} ({last_processed_time_ts}) and {type(current_utc_time_ts)} ({current_utc_time_ts})")
                continue # Skip to next ticker if comparison fails

            if not new_signals.empty:
                latest_new_signal = new_signals.iloc[-1]
                signal_time = latest_new_signal['Timestamp'] # pd.Timestamp
                signal_type = latest_new_signal['SignalType']
                self.Log(f"{ticker}: Intra-Day Action -> Signal: {signal_type} @ {signal_time}. Processing.")
                # Pass the pandas Timestamp signal_time
                self._execute_trade_logic(ticker, signal_type, signal_time)
                continue

            # --- Manage Open Position ---
            option_symbol = self.current_option_symbol[ticker] # This is the Option Symbol object
            if option_symbol and self.Portfolio[option_symbol].Invested:
                option_holding = self.Portfolio[option_symbol]
                current_price = option_holding.Price
                entry_price = self.option_entry_price[ticker]
                if entry_price <= 0: self.Debug(f"{ticker}: Entry price {entry_price} invalid. Skipping TP/SL."); continue

                # Check TP / SL (rest is unchanged)
                if self.take_profit_pct > 0:
                    tp_price = entry_price * (1 + self.take_profit_pct)
                    if current_price >= tp_price:
                        self.Log(f"{ticker}: TAKE PROFIT @ {current_price:.2f} (Entry: {entry_price:.2f}, Target: {tp_price:.2f})")
                        self.Liquidate(option_symbol, f"Take Profit @ {current_price:.2f}"); self._reset_position_tracking(ticker); continue
                if self.stop_loss_pct > 0:
                    sl_price = entry_price * (1 - self.stop_loss_pct)
                    if current_price <= sl_price:
                        self.Log(f"{ticker}: STOP LOSS @ {current_price:.2f} (Entry: {entry_price:.2f}, Target: {sl_price:.2f})")
                        self.Liquidate(option_symbol, f"Stop Loss @ {current_price:.2f}"); self._reset_position_tracking(ticker); continue


    def _execute_trade_logic(self, ticker: str, signal_type: str, signal_time: pd.Timestamp):
        """Core logic to execute a trade based on a new signal."""
        self.Log(f"Executing trade logic for {ticker}: Signal={signal_type}, Time={signal_time}")

        # Update Last Processed Time (ensure pd.Timestamp)
        self.last_processed_signal_time[ticker] = pd.Timestamp(signal_time)

        # Check if Signal Requires Action
        current_symbol = self.current_option_symbol[ticker]
        if self.active_signal_type[ticker] == signal_type and current_symbol and self.Portfolio[current_symbol].Invested:
             self.Log(f"{ticker}: Signal type ({signal_type}) same as active. No change."); return

        # Liquidate Existing Position
        if current_symbol and self.Portfolio[current_symbol].Invested:
            self.Log(f"{ticker}: Liquidating {current_symbol.Value} due to new signal '{signal_type}'.")
            self.Liquidate(current_symbol, f"New signal {signal_type}"); self._reset_position_tracking(ticker)

        # Find Target Option Contract (returns a Symbol object or None)
        target_option_symbol = self._find_option_contract(ticker, option_right = OptionRight.Call if signal_type == 'Call' else OptionRight.Put)

        # Place Order if Contract Symbol Found
        if target_option_symbol:
            self.Log(f"{ticker}: Found {target_option_symbol.Value}. Placing order.")
            # Use the found Symbol object directly in MarketOrder
            order_ticket = self.MarketOrder(target_option_symbol, 1)
            if order_ticket.Status == OrderStatus.Invalid:
                 self.Error(f"{ticker}: Order for {target_option_symbol} FAILED: {order_ticket.GetErrorMessage()}"); self._reset_position_tracking(ticker)
            else:
                 self.active_signal_type[ticker] = signal_type
                 # Store the Symbol object of the contract we are trading
                 self.current_option_symbol[ticker] = target_option_symbol
                 self.option_entry_price[ticker] = 0.0;
                 self.Log(f"{ticker}: Order submitted for {target_option_symbol}. ID: {order_ticket.OrderId}")
        else:
            self.Log(f"{ticker}: No suitable {signal_type} contract found. No trade."); self._reset_position_tracking(ticker)


    def _find_option_contract(self, ticker: str, option_right: OptionRight) -> Symbol | None:
        """
        Finds the single best option contract Symbol matching the criteria.
        Returns the Symbol object or None.
        """
        try: underlying_symbol = self.option_universe_settings[ticker]['equity_symbol']
        except KeyError: self.Error(f"Ticker '{ticker}' not found in settings."); return None
        if underlying_symbol not in self.Securities or not self.Securities[underlying_symbol].HasData: self.Log(f"Warning: Underlying data unavailable for {ticker} at {self.Time}."); return None
        underlying_price = self.Securities[underlying_symbol].Price
        if underlying_price <= 0: self.Log(f"Warning: Underlying price {underlying_price} invalid for {ticker} at {self.Time}."); return None

        chain_symbols = self.OptionChainProvider.GetOptionContractList(underlying_symbol, self.Time)
        if not chain_symbols: self.Debug(f"No option chain symbols for {ticker} at {self.Time}"); return None

        symbols_of_type = [s for s in chain_symbols if s.ID.OptionRight == option_right]
        if not symbols_of_type: self.Debug(f"No {option_right.name} contract symbols found for {ticker}"); return None

        # Filter Symbols by DTE
        target_expiry_dt = self.Time.date() + timedelta(days=self.target_dte); min_dte_diff = float('inf'); closest_expiry_date = None;
        available_expiries = sorted(list(set(symbol.ID.Date.date() for symbol in symbols_of_type)))
        for expiry_date in available_expiries:
            dte = (expiry_date - self.Time.date()).days; dte_diff = abs(dte - self.target_dte);
            if dte_diff < min_dte_diff: min_dte_diff = dte_diff; closest_expiry_date = expiry_date;
            elif dte_diff == min_dte_diff and (closest_expiry_date is None or expiry_date < closest_expiry_date): closest_expiry_date = expiry_date;
        if closest_expiry_date is None: self.Log(f"{ticker}: Could not find expiry near DTE {self.target_dte}."); return None
        symbols_at_expiry = [s for s in symbols_of_type if s.ID.Date.date() == closest_expiry_date]
        actual_dte = (closest_expiry_date - self.Time.date()).days; self.Debug(f"{ticker}: Selected expiry {closest_expiry_date} (DTE: {actual_dte})")

        # Filter Symbols by Delta and Liquidity
        target_delta_abs = abs(self.target_delta); best_symbol = None; min_delta_diff = float('inf');
        symbols_at_expiry.sort(key=lambda s: abs(s.ID.StrikePrice - underlying_price))

        for symbol in symbols_at_expiry: # Iterate through SYMBOL objects
            if symbol not in self.Securities: self.Debug(f"{symbol.Value} not in Securities collection yet."); continue
            option_security = self.Securities[symbol] # Get the Security object

            # Ensure we have an OptionContract object, not the parent Option chain object
            if not isinstance(option_security, OptionContract):
                self.Debug(f"Skipping {symbol.Value}: Security object is not an OptionContract (Type: {type(option_security)}).")
                continue

            if not option_security.HasData: self.Debug(f"{symbol.Value} Security object has no data yet."); continue

            # Check liquidity using the Security object
            if option_security.Price <= 0 or option_security.AskPrice <= 0 or option_security.BidPrice <= 0: self.Debug(f"Skipping {symbol.Value}: Illiquid."); continue

            # Get Greeks from the Security object (should exist if it's an OptionContract)
            greeks = option_security.Greeks
            if greeks.Delta == 0 and underlying_price > 0: self.Debug(f"Skipping {symbol.Value}: Delta is zero."); continue

            contract_delta_abs = abs(greeks.Delta); delta_diff = abs(contract_delta_abs - target_delta_abs);
            if delta_diff < min_delta_diff: min_delta_diff = delta_diff; best_symbol = symbol; # Store the best SYMBOL

        if best_symbol:
             final_greeks = self.Securities[best_symbol].Greeks
             self.Debug(f"{ticker}: Selected {best_symbol.Value} (Strike:{best_symbol.ID.StrikePrice}, Delta:{final_greeks.Delta:.3f}, Target:~{self.target_delta:.2f}, DTE:{actual_dte})")
        else: self.Log(f"{ticker}: No suitable contract found near Delta {self.target_delta} for expiry {closest_expiry_date}.")

        return best_symbol


    def OnOrderEvent(self, orderEvent: OrderEvent):
        """Handles order events to record entry price."""
        order = self.Transactions.GetOrderById(orderEvent.OrderId)
        if orderEvent.Status != OrderStatus.Filled and orderEvent.Status != OrderStatus.PartiallyFilled: return
        if order.SecurityType != SecurityType.Option: return
        ticker = order.Symbol.Underlying.Value

        if ticker in self.current_option_symbol and order.Symbol == self.current_option_symbol[ticker]:
            if order.Direction == OrderDirection.Buy:
                 current_holding = self.Portfolio[order.Symbol]; total_quantity_after_fill = current_holding.AbsoluteQuantity;
                 fill_quantity_this_event = orderEvent.FillQuantity; fill_price_this_event = orderEvent.FillPrice;
                 quantity_before_this_fill = total_quantity_after_fill - fill_quantity_this_event;
                 cost_before_this_fill = self.option_entry_price[ticker] * quantity_before_this_fill;
                 cost_of_this_fill = fill_quantity_this_event * fill_price_this_event;
                 if total_quantity_after_fill != 0: new_average_price = (cost_before_this_fill + cost_of_this_fill) / total_quantity_after_fill
                 else: self.Error(f"Calc avg price error for {order.Symbol}"); new_average_price = fill_price_this_event; # Fallback
                 self.option_entry_price[ticker] = new_average_price
                 self.Log(f"{ticker}: BUY Fill {order.Symbol}. Qty:{fill_quantity_this_event}, Price:{fill_price_this_event:.4f}. New Avg Entry:{new_average_price:.4f}, Total Qty:{total_quantity_after_fill}")


    def _reset_position_tracking(self, ticker: str):
        """Resets state variables for a ticker."""
        self.Debug(f"Resetting state for {ticker}")
        self.active_signal_type[ticker] = None; self.current_option_symbol[ticker] = None; self.option_entry_price[ticker] = 0.0;


    def OnEndOfAlgorithm(self):
        """End of algorithm operations."""
        self.Log("--- End of Algorithm ---")
        self.Log(f"Final Portfolio Value: {self.Portfolio.TotalPortfolioValue:,.2f}")

